// Nafi Un-Grammar.
//
// This grammar specifies the structure of Nafi's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, operators glued.
// <https://rust-analyzer.github.io/blog/2020/10/24/introducing-ungrammar.html>
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

//*************************//
//     Quasi-Terminals     //
//*************************//

Op = 'syntax'*

Number =
  'digits'
  ('.' 'digits')?
  ('e' 'digits')?

//*************************//
//          Items          //
//*************************//

SourceFile =
  Expr

//*************************//
//       Expressions       //
//*************************//

Expr =
  LiteralExpr
| InfixExpr
| PrefixExpr
| SuffixExpr
| CircumfixExpr

LiteralExpr =
  value:Number

InfixExpr =
  lhs:Expr
  infix:Op
  rhs:Expr

PrefixExpr =
  prefix:Op
  rhs:Expr

SuffixExpr =
  lhs:Expr
  suffix:Op

CircumfixExpr =
  prefix:Op
  expr:Expr
  suffix:Op
